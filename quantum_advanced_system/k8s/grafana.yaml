apiVersion: apps/v1
kind: Deployment
metadata:
  name: quantum-grafana
  namespace: monitoring
  labels:
    app: grafana
    component: visualization
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
      component: visualization
  template:
    metadata:
      labels:
        app: grafana
        component: visualization
    spec:
      securityContext:
        fsGroup: 472
        runAsUser: 472
      containers:
      - name: grafana
        image: grafana/grafana:9.5.3
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
          name: http-grafana
        env:
        - name: GF_SECURITY_ADMIN_USER
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-user
        - name: GF_SECURITY_ADMIN_PASSWORD
          valueFrom:
            secretKeyRef:
              name: grafana-secrets
              key: admin-password
        - name: GF_PATHS_PROVISIONING
          value: /etc/grafana/provisioning
        volumeMounts:
        - name: grafana-storage
          mountPath: /var/lib/grafana
        - name: grafana-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
        resources:
          requests:
            cpu: "100m"
            memory: "256Mi"
          limits:
            cpu: "500m"
            memory: "1Gi"
        readinessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 10
          timeoutSeconds: 5
        livenessProbe:
          httpGet:
            path: /api/health
            port: 3000
          initialDelaySeconds: 30
          timeoutSeconds: 5
      volumes:
      - name: grafana-storage
        persistentVolumeClaim:
          claimName: grafana-pvc
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
---
apiVersion: v1
kind: Service
metadata:
  name: quantum-grafana
  namespace: monitoring
  labels:
    app: grafana
    component: visualization
spec:
  type: LoadBalancer
  ports:
  - port: 3000
    targetPort: http-grafana
    protocol: TCP
    name: http
  selector:
    app: grafana
    component: visualization
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-pvc
  namespace: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  prometheus.yaml: |-
    apiVersion: 1
    datasources:
    - name: Prometheus
      type: prometheus
      url: http://quantum-prometheus:9090
      access: proxy
      isDefault: true
      editable: false
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
data:
  quantum-overview.json: |-
    {
      "title": "Quantum System Overview",
      "panels": [
        {
          "title": "Quantum API Requests",
          "type": "graph",
          "datasource": "Prometheus",
          "targets": [
            {
              "expr": "sum(rate(http_requests_total{namespace=\"quantum-prod\"}[5m])) by (status_code)",
              "legendFormat": "{{status_code}}"
            }
          ]
        },
        {
          "title": "Quantum Engine Performance",
          "type": "stat",
          "datasource": "Prometheus",
          "targets": [
            {
              "expr": "quantum_engine_execution_time_seconds",
              "legendFormat": "Execution Time"
            }
          ]
        }
      ]
    }
---
apiVersion: v1
kind: Secret
metadata:
  name: grafana-secrets
  namespace: monitoring
type: Opaque
data:
  admin-user: YWRtaW4=  # base64 encoded 'admin'
  admin-password: cGFzc3dvcmQ=  # base64 encoded 'password'